import java.io.*;
import java.util.*;
class Pair { 
    int x; 
    int y; 
  
    // Constructor 
public Pair(int x, int y) 
    { 
        this.x = x; 
        this.y = y; 
    } 
} 
  
// class to define user defined conparator 
class Compare { 
  
    static void compare(Pair array[]) 
    { 
        // sorts pair based on first element
        Arrays.sort(array, new Comparator<Pair>() { 
            @Override public int compare(Pair p1, Pair p2){ 
                return p1.x - p2.x; 
            } 
        }
        ); 
        
        
    } 
} 

public class Main {
    public static void main(String[] args) {
            Scanner input = new Scanner (System.in);
           
            
            int kR = input.nextInt();
            int kC = input.nextInt();
            
            int x = input.nextInt();
            int y = input.nextInt();
            int rows = 8;
            int col = 8;
            
            List<Pair> adj[][] = new ArrayList[rows+1][col+1];
            int[][] count = new int[rows+1][col+1];
            
            
            for (int i =0; i<= rows; i++){
                for (int j =0; j<=col; j++){
                    adj[i][j] = new ArrayList();
                }
            }
            
            Queue<Pair> q = new LinkedList();
            boolean[][] vis = new boolean[rows+1][col+1];
            Pair first = new Pair(kR,kC);
            q.add(first);
            
            count[kR][kC] = 0;
            vis[kR][kC] = true;
               
            while (!q.isEmpty()){
                Pair og = q.poll();
                for (int i =1; i<=8; i++){
                    if (i==1 && og.x+2<=rows && og.y+1 <=col && !vis[og.x+2][og.y+1]){
                        
                        Pair xy = new Pair (og.x+2, og.y+1);
                        adj[og.x][og.y].add(xy);
                        adj[og.x+2][og.y+1].add(og);
                        q.add(xy);
                        vis[og.x+2][og.y+1] = true;
                        count[og.x+2][og.y+1] = count[og.x][og.y]+1;
                    }
                    else if (i==2 && og.x+1<=rows && og.y+2 <=col && !vis[og.x + 1][og.y + 2]){
                        Pair xy = new Pair(og.x + 1, og.y + 2);
                        adj[og.x][og.y].add(xy);
                        adj[og.x + 1][og.y + 2].add(og);  
                        q.add(xy);
                        vis[og.x+1][og.y+2] = true;
                        count[og.x + 1][og.y + 2] = count[og.x][og.y]+1;
                    }
                    else if (i == 3 && og.x - 1 >0 && og.y + 2 <= col && !vis[og.x - 1][og.y + 2]) {
                        Pair xy = new Pair(og.x - 1, og.y + 2);
                        adj[og.x][og.y].add(xy);
                        adj[og.x - 1][og.y + 2].add(og);
                        q.add(xy);
                        vis[og.x - 1][og.y + 2] = true;
                        count[og.x - 1][og.y + 2] = count[og.x][og.y]+1;
                    }
                    else if (i == 4 && og.x - 2 >0 && og.y + 1 <= col && !vis[og.x - 2][og.y + 1]) {
                        Pair xy = new Pair(og.x - 2, og.y + 1);
                        adj[og.x][og.y].add(xy);
                        adj[og.x - 2][og.y + 1].add(og);
                        q.add(xy);
                        vis[og.x - 2][og.y + 1] = true;
                        count[og.x - 2][og.y + 1] = count[og.x][og.y]+1;
                    }
                    else if (i == 5 && og.x - 2 > 0 && og.y - 1 > 0 && !vis[og.x - 2][og.y - 1]) {
                        Pair xy = new Pair(og.x - 2, og.y - 1);
                        adj[og.x][og.y].add(xy);
                        adj[og.x - 2][og.y - 1].add(og);
                        q.add(xy);
                        vis[og.x - 2][og.y - 1] = true;
                        count[og.x - 2][og.y - 1] = count[og.x][og.y]+1;
                    }
                    else if (i == 6 && og.x - 1 > 0 && og.y - 2 > 0 && !vis[og.x - 1][og.y - 2]) {
                        Pair xy = new Pair(og.x - 1, og.y - 2);
                        adj[og.x][og.y].add(xy);
                        adj[og.x - 1][og.y - 2].add(og);
                        q.add(xy);
                        count[og.x - 1][og.y - 2]= count[og.x][og.y]+1;
                    }
                    else if (i == 7 && og.x + 1 <=rows && og.y - 2 > 0 && !vis[og.x + 1][og.y - 2])  {
                        Pair xy = new Pair(og.x + 1, og.y - 2);
                        adj[og.x][og.y].add(xy);
                        adj[og.x + 1][og.y - 2].add(og);
                        q.add(xy);
                        vis[og.x + 1][og.y - 2] = true;
                        count[og.x + 1][og.y - 2] = count[og.x][og.y]+1;
                    }
                    else if (i == 8 && og.x + 2 <= rows && og.y - 1 > 0 && !vis[og.x + 2][og.y - 1]) {
                        Pair xy = new Pair(og.x + 2, og.y - 1);
                        adj[og.x][og.y].add(xy);
                        adj[og.x + 2][og.y - 1].add(og);
                        q.add(xy);
                        vis[og.x + 2][og.y - 1] = true;
                        count[og.x + 2][og.y - 1] = count[og.x][og.y]+1;
                    }
                }
            }
            System.out.println(count[x][y]);
    }
}
