/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.util.*;
import java.io.*;

/**
 *
 * @author billy
 */
class Pair implements Comparable<Pair>{
    int x;
    int y;
    
    Pair (int x0, int y0){
        x=x0;
        y=y0;
        
    }
    public int compareTo(Pair e){
        return y-e.y;
    }
}

public class ShopAndShip {

   

        
    public static void main(String[] args) throws IOException {
	
        int n = readInt();
        int t = readInt();
        
        int [][] adj = new int[n+1][n+1];
        for (int i =1; i<=n; i++){
            Arrays.fill(adj[i], (int) 1e9);
        }
        int[] dis = new int[n+1];
        
        for (int i = 0; i<t; i ++){
            int a = readInt();
            int b = readInt();
            int dist = readInt();
            adj[a][b] = dist;
            adj[b][a] = dist;
        }
        
        int k = readInt();
        
        int[] sell = new int[n+1];
        Arrays.fill(sell,(int)1e9);
        for (int i =0; i<k; i++){
            sell[readInt()] = readInt();
        }
        
        int d = readInt();
        Arrays.fill(dis, (int) 1e9);
        dis[d] = 0;
        boolean [] check = new boolean [n+1];
        
        for (int i =1; i<=n; i++){
            
            int min = (int) 1e9;
            int index = (int) 1e9;
            for (int j =1; j<=n; j++){
                if (!check[j] && dis[j] <min){
                    min = dis[j];
                    index = j;
                }
            }
            if (index== (int) 1e9){
                break;
            }
            check[index] = true;
            
            for (int j =1; j<=n; j++){
                if (!check[j] && dis[j] > dis[index] + adj[index][j]){
                    dis[j ] =dis[index]  + adj[index][j];
                }
            }
        }
        
        int ans = Integer.MAX_VALUE;
        for (int i =1; i<=n; i++){
            if (sell[i]!=(int)1e9){
                ans = Math.min(ans, sell[i] + dis[i]);
            }
        }
        System.out.println(ans);
    }
        
        
        
        
        

	final private static int BUFFER_SIZE = 1 << 16;
	private static DataInputStream din = new DataInputStream(System.in);
	private static byte[] buffer = new byte[BUFFER_SIZE];
	private static int bufferPointer = 0, bytesRead = 0;
	static PrintWriter pr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

	public static String readLine() throws IOException {
		byte[] buf = new byte[64]; // line length
		int cnt = 0, c;
		while ((c = Read()) != -1) {
			if (c == '\n')
				break;
			buf[cnt++] = (byte) c;
		}
		return new String(buf, 0, cnt);
	}
        
	public static String read() throws IOException{
		byte[] ret = new byte[1024];
        int idx = 0;
        byte c = Read();
        while (c <= ' ') {
            c = Read();
        }
        do {
            ret[idx++] = c;
            c = Read();
        } while (c != -1 && c != ' ' && c != '\n' && c != '\r');
        return new String(ret, 0, idx);
	}
        
        
	public static int readInt() throws IOException {
		int ret = 0;
		byte c = Read();
		while (c <= ' ')
			c = Read();
		boolean neg = (c == '-');
		if (neg)
			c = Read();
		do {
			ret = ret * 10 + c - '0';
		} while ((c = Read()) >= '0' && c <= '9');

		if (neg)
			return -ret;
		return ret;
	}

	public static long readLong() throws IOException {
		long ret = 0;
		byte c = Read();
		while (c <= ' ')
			c = Read();
		boolean neg = (c == '-');
		if (neg)
			c = Read();
		do {
			ret = ret * 10 + c - '0';
		} while ((c = Read()) >= '0' && c <= '9');
		if (neg)
			return -ret;
		return ret;
	}

	public static double readDouble() throws IOException {
		double ret = 0, div = 1;
		byte c = Read();
		while (c <= ' ')
			c = Read();
		boolean neg = (c == '-');
		if (neg)
			c = Read();

		do {
			ret = ret * 10 + c - '0';
		} while ((c = Read()) >= '0' && c <= '9');

		if (c == '.') {
			while ((c = Read()) >= '0' && c <= '9') {
				ret += (c - '0') / (div *= 10);
			}
		}

		if (neg)
			return -ret;
		return ret;
	}

	private static void fillBuffer() throws IOException {
		bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
		if (bytesRead == -1)
			buffer[0] = -1;
	}

	private static byte Read() throws IOException {
		if (bufferPointer == bytesRead)
			fillBuffer();
		return buffer[bufferPointer++];
	}

	public void close() throws IOException {
		if (din == null)
			return;
		din.close();
	}

	static void print(Object o) {
		pr.print(o);
	}

	static void println(Object o) {
		pr.println(o);
	}

	static void flush() {
		pr.flush();
	}

	static void println() {
		pr.println();
	}

	static void exit() throws IOException {
		din.close();
		pr.close();
		System.exit(0);
	}
    
    
    
}
