 */
import java.util.*;
import java.io.*;

/**
 *
 * @author billy
 */
public class GGG {
            static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
   static PrintWriter pr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
   static StringTokenizer st;

   

    public static void main(String[] args) throws IOException {
        
        int n = readInt();
        int a[] = new int[n];
        int MM = (int)1e6;
        int[] aPos = new int [MM+1];
        
        for (int i =0; i<n; i++){
            a[i] = readInt();
            aPos[a[i]] = i+1;//stores position of the index
        }
        
        
        int n2 = readInt();
        int b[] = new int[n2];
        for(int i =0; i<n2; i++){
            b[i] = readInt();
        }
        ArrayList<Integer> list = new ArrayList();
        
        
        for (int i =0; i<n2; i++){
            int x = b[i];
            int posA = aPos[x];
            if (posA != 0){
                list.add(posA);
            }
        }
        
        
        ArrayList<Integer> lis = new ArrayList();
        
        for (int i =0; i<list.size(); i++){
            int x = list.get(i);
            if (lis.isEmpty() || x>lis.get(lis.size()-1)){
                lis.add(x);
            }
            else{
                int p = Collections.binarySearch(lis,x);
                if (p<0){
                    p = -p-1;
                    lis.set(p, x);
                }
            }
        }
        System.out.println(lis.size());
        
        
        
        
    }






   static String read () throws IOException {
       while (st == null || !st.hasMoreTokens())
           st = new StringTokenizer(br.readLine().trim());
       return st.nextToken();
   }
   static long readLong () throws IOException {
       return Long.parseLong(read());
   }
   static int readInt () throws IOException {
       return Integer.parseInt(read());
   }
   static double readDouble () throws IOException {
       return Double.parseDouble(read());
   }
   static char readChar () throws IOException {
       return read().charAt(0);
   }
   static String readLine () throws IOException {
       return br.readLine().trim();
   }
}
