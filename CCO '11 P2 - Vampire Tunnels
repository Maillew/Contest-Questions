import java.util.*;
import java.io.*;
/**
 *
 * @author billy
 */
class Triple { 
    int index; 
    int dis;
    int dmg;
  
    // Constructor 
public Triple(int index, int dis, int dmg) 
    { 
        this.index = index; 
        this.dis = dis;
        this.dmg = dmg;
    } 
} 
  
// class to define user defined conparator 
class Compare { 
  
    static void compare(Triple array[]) 
    { 
        // sorts pair based on first element
        Arrays.sort(array, new Comparator<Triple>() { 
            @Override public int compare(Triple p1, Triple p2){ 
                return p1.dis - p2.dis; 
            } 
        }
        ); 
        
        
    } 
     static class cmp implements Comparator<Triple>{
            public int compare(Triple a,Triple b){
                return a.dis-b.dis;
            }
            
     }       
} 
public class Main {

    /**
     * @param args the command line arguments
     */
   	public static void main(String[] args) throws IOException {
            int k = readInt();//seconds
            int n = readInt();//nodes
            int m = readInt();//conenctions

            List<Triple> adj[] = new ArrayList[n+1];

            for (int i =0; i<=n; i++){
                adj[i] = new ArrayList();
            }

            for (int i = 1; i<=m; i++){
                int a = readInt();
                int b = readInt();
                int t = readInt();//distance
                int h = readInt();//abeove or below ground
                if (h==1){
                	h = t;
                }
                else{
                	h = 0;
                }
                
                adj[a].add(new Triple(b,t,h));
                adj[b].add(new Triple(a,t,h));
            }

            int A = 0;//start
            int B = n-1;//end
            
            int[][] dis = new int[n+1][k+1];//shortest dustance to node i, with exactly j damage

            for (int i =0; i<=n; i++){
                for (int j =0; j<=k ;j++){
                    dis[i][j] = (int) 1e9;
                }
            }

            Arrays.fill(dis[A],0);

            PriorityQueue<Triple> pq = new PriorityQueue(new Compare.cmp());
            pq.add(new Triple(A,0,0));

            while(!pq.isEmpty()){
                Triple pi = pq.poll();
                if (pi.index == B){
                    break;
                    
                }
                if (pi.dis>dis[pi.index][pi.dmg]){
                    continue;
                }
                else{

                    for (int i =0; i<adj[pi.index].size();i++){

                        //for (int j =0; j<k-adj[pi.index].get(i).dmg; j++){
                        if (pi.dmg + adj[pi.index].get(i).dmg <=k){
                            int j = pi.dmg;
                            int cur = dis[pi.index][j] + adj[pi.index].get(i).dis;//distance to current node, then to next node
                            if (cur < dis[adj[pi.index].get(i).index] [j+adj[pi.index].get(i).dmg]){

                                dis[adj[pi.index].get(i).index][j+adj[pi.index].get(i).dmg] = cur;

                                //if (!check[adj[pi.index].get(i).index]){//checks if its already in the queu
                                    pq.add(new Triple(adj[pi.index].get(i).index, cur, j + adj[pi.index].get(i).dmg));
                                    //check[adj[pi.index].get(i).index] = true;
                                ///}

                            }


                        }

                    }

                }
            }

            //cant calculate distance and damage separately, because it could result in different paths
            int ans = Integer.MAX_VALUE;
            for (int i =0; i<=k; i++){
                ans = Math.min(ans,dis[B][i]);
            }
            if (ans == 1e9){
                System.out.println(-1);
            }
            else System.out.println(ans);
	}
        
        
        
        
        

	final private static int BUFFER_SIZE = 1 << 16;
	private static DataInputStream din = new DataInputStream(System.in);
	private static byte[] buffer = new byte[BUFFER_SIZE];
	private static int bufferPointer = 0, bytesRead = 0;
	static PrintWriter pr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

	public static String readLine() throws IOException {
		byte[] buf = new byte[64]; // line length
		int cnt = 0, c;
		while ((c = Read()) != -1) {
			if (c == '\n')
				break;
			buf[cnt++] = (byte) c;
		}
		return new String(buf, 0, cnt);
	}
	public static String read() throws IOException{
		byte[] ret = new byte[1024];
        int idx = 0;
        byte c = Read();
        while (c <= ' ') {
            c = Read();
        }
        do {
            ret[idx++] = c;
            c = Read();
        } while (c != -1 && c != ' ' && c != '\n' && c != '\r');
        return new String(ret, 0, idx);
	}
	public static int readInt() throws IOException {
		int ret = 0;
		byte c = Read();
		while (c <= ' ')
			c = Read();
		boolean neg = (c == '-');
		if (neg)
			c = Read();
		do {
			ret = ret * 10 + c - '0';
		} while ((c = Read()) >= '0' && c <= '9');

		if (neg)
			return -ret;
		return ret;
	}

	public static long readLong() throws IOException {
		long ret = 0;
		byte c = Read();
		while (c <= ' ')
			c = Read();
		boolean neg = (c == '-');
		if (neg)
			c = Read();
		do {
			ret = ret * 10 + c - '0';
		} while ((c = Read()) >= '0' && c <= '9');
		if (neg)
			return -ret;
		return ret;
	}

	public static double readDouble() throws IOException {
		double ret = 0, div = 1;
		byte c = Read();
		while (c <= ' ')
			c = Read();
		boolean neg = (c == '-');
		if (neg)
			c = Read();

		do {
			ret = ret * 10 + c - '0';
		} while ((c = Read()) >= '0' && c <= '9');

		if (c == '.') {
			while ((c = Read()) >= '0' && c <= '9') {
				ret += (c - '0') / (div *= 10);
			}
		}

		if (neg)
			return -ret;
		return ret;
	}

	private static void fillBuffer() throws IOException {
		bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
		if (bytesRead == -1)
			buffer[0] = -1;
	}

	private static byte Read() throws IOException {
		if (bufferPointer == bytesRead)
			fillBuffer();
		return buffer[bufferPointer++];
	}

	public void close() throws IOException {
		if (din == null)
			return;
		din.close();
	}

	static void print(Object o) {
		pr.print(o);
	}

	static void println(Object o) {
		pr.println(o);
	}

	static void flush() {
		pr.flush();
	}

	static void println() {
		pr.println();
	}

	static void exit() throws IOException {
		din.close();
		pr.close();
		System.exit(0);
	}
    
    
}
