import java.util.*;
import java.io.*;

/**
 *
 * @author billy
 */
public class SearchingForStrings2 {
    
    /**
     * @param args the command line arguments
     */
        static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
   static PrintWriter pr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
   static StringTokenizer st;

        public static void main(String[] args) throws IOException {

            String a = read();
            String b = read();
            int n = a.length();
            int m = b.length();
            
            if (n>m) {System.out.println(0); 
                return;
            }
            
            long[] pow = new long[m+1];
            long[] hash = new long[m+1];
            
            pow[0] = 1;
            int base = 131;
            
            for (int i =1; i<=m; i++){
                pow[i] = pow[i-1]*base;
                hash[i] = hash[i - 1] * base + b.charAt(i-1);
            }
            
            int[] ltr = new int[27];
            int[] freq = new int[27];
            
            for (int i =0; i<n; i++){
                ltr[a.charAt(i)-96]++;
                freq[b.charAt(i) - 96]++;
            }
            
            
            
            HashSet<Long> map = new HashSet();
            
            for (int i =1; i<= m-n+1; i++){
                int letters = 0;
                for (int j = 1; j<=26; j++){
                    if (freq[j] == ltr[j]) letters++;
                }
               for (int j =0; j<=4; j++){
                    //System.out.println(j + " " + freq[j]);
                }
                if (letters == 26){
                    long hashed = getHash(pow, hash, i, i+n-1); //hash is index 1
                    //System.out.println(b.substring(i - 1, i + n - 1));

                    if (!map.contains(hashed)){
                        map.add(hashed);
                        //System.out.println(hashed);
                    }
                    
                }
                
                freq[b.charAt(i-1) - 96]--;//string is index 0
                if (i <=m - n) {
                    freq[b.charAt(i + n-1) - 96]++;//string is index 0
                }
            }
            
            System.out.println(map.size());
        }


    static long getHash(long[] pow, long[]hash, int L, int R){
        return hash[R] - hash[L-1] * pow[R-L+1];
    }



   static String read () throws IOException {
       while (st == null || !st.hasMoreTokens())
           st = new StringTokenizer(br.readLine().trim());
       return st.nextToken();
   }
   static long readLong () throws IOException {
       return Long.parseLong(read());
   }
   static int readInt () throws IOException {
       return Integer.parseInt(read());
   }
   static double readDouble () throws IOException {
       return Double.parseDouble(read());
   }
   static char readChar () throws IOException {
       return read().charAt(0);
   }
   static String readLine () throws IOException {
       return br.readLine().trim();
   }
   
}
