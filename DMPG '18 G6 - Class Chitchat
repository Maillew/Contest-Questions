import java.util.*;
import java.io.*;


// class to define user defined conparator 
 
public class ClassChitChat {
    public static class Pair implements Comparable<Pair> {

        int x;
        long y;
        //// Â© Maillew 2020 :)))
        Pair(int x, long y) {
            this.x = x;
            this.y = y;
        }

        public int compareTo(Pair e) {
            if (y > e.y) {
                return 1;
            } else {
                return -1;
            }
        }

    }
    /**
     * @param args the command line arguments
     */
        
   	public static void main(String[] args) throws IOException {
		
            int N = readInt();//ppl
            int C = readInt();//classes
            int K = readInt();//constant cost
            //atudent 1, to each student
            List<Integer> classes[] = new ArrayList[N+1];
            List<Integer> students[] = new ArrayList[C+1];
            int[] val = new int[N+1];
            
            for (int i =0; i<=N; i++){
                classes[i] = new ArrayList();
            }
            for (int i =0; i<=C; i++){
                students[i] = new ArrayList();
            }
            
            for (int i =1; i<=N; i++){
                val[i] = readInt();//friends value
            }
            
            
            
            for (int i =1; i<=N; i++){
                int c = readInt();
                for (int j =1; j<=c; j++){
                    int cc = readInt();
                    classes[i].add(cc);//class has i student
                    students[cc].add(i);//i student has cc class
                }
            }
            
            PriorityQueue<Pair> pq = new PriorityQueue<>();
            long[] dp = new long[N+1];
            Arrays.fill(dp, Long.MAX_VALUE);
            dp[1] = 0;
            pq.add(new Pair(1,0));
            
            while(!pq.isEmpty()){
                Pair pi = pq.poll();
                int stu = pi.x;
                long value = pi.y;
                
                if (value>dp[stu]){
                    continue;
                }
                for (int i: classes[stu]){//all classes students is in
                    for (int j: students[i]){//all the students in ith class
                        long talk = value + Math.abs(val[stu] - val[j]) + K;//      
                        
                        if (talk < dp[j]){
                            dp[j] = talk;
                            pq.add(new Pair (j, talk));
                        }
                    
                    }
                }
            }
            for (int i =1; i<=N; i++){
                if (dp[i]==Long.MAX_VALUE){
                    System.out.println(-1);
                }
                else System.out.println(dp[i]);
            }
        }
        
        
        
        
        

	final private static int BUFFER_SIZE = 1 << 16;
	private static DataInputStream din = new DataInputStream(System.in);
	private static byte[] buffer = new byte[BUFFER_SIZE];
	private static int bufferPointer = 0, bytesRead = 0;
	static PrintWriter pr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

	public static String readLine() throws IOException {
		byte[] buf = new byte[64]; // line length
		int cnt = 0, c;
		while ((c = Read()) != -1) {
			if (c == '\n')
				break;
			buf[cnt++] = (byte) c;
		}
		return new String(buf, 0, cnt);
	}
        
	public static String read() throws IOException{
		byte[] ret = new byte[1024];
        int idx = 0;
        byte c = Read();
        while (c <= ' ') {
            c = Read();
        }
        do {
            ret[idx++] = c;
            c = Read();
        } while (c != -1 && c != ' ' && c != '\n' && c != '\r');
        return new String(ret, 0, idx);
	}
        
        
	public static int readInt() throws IOException {
		int ret = 0;
		byte c = Read();
		while (c <= ' ')
			c = Read();
		boolean neg = (c == '-');
		if (neg)
			c = Read();
		do {
			ret = ret * 10 + c - '0';
		} while ((c = Read()) >= '0' && c <= '9');

		if (neg)
			return -ret;
		return ret;
	}

	public static long readLong() throws IOException {
		long ret = 0;
		byte c = Read();
		while (c <= ' ')
			c = Read();
		boolean neg = (c == '-');
		if (neg)
			c = Read();
		do {
			ret = ret * 10 + c - '0';
		} while ((c = Read()) >= '0' && c <= '9');
		if (neg)
			return -ret;
		return ret;
	}

	public static double readDouble() throws IOException {
		double ret = 0, div = 1;
		byte c = Read();
		while (c <= ' ')
			c = Read();
		boolean neg = (c == '-');
		if (neg)
			c = Read();

		do {
			ret = ret * 10 + c - '0';
		} while ((c = Read()) >= '0' && c <= '9');

		if (c == '.') {
			while ((c = Read()) >= '0' && c <= '9') {
				ret += (c - '0') / (div *= 10);
			}
		}

		if (neg)
			return -ret;
		return ret;
	}

	private static void fillBuffer() throws IOException {
		bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
		if (bytesRead == -1)
			buffer[0] = -1;
	}

	private static byte Read() throws IOException {
		if (bufferPointer == bytesRead)
			fillBuffer();
		return buffer[bufferPointer++];
	}

	public void close() throws IOException {
		if (din == null)
			return;
		din.close();
	}

	static void print(Object o) {
		pr.print(o);
	}

	static void println(Object o) {
		pr.println(o);
	}

	static void flush() {
		pr.flush();
	}

	static void println() {
		pr.println();
	}

	static void exit() throws IOException {
		din.close();
		pr.close();
		System.exit(0);
	}
    
}
