import java.util.*;
import java.io.*;

/**
 *
 * @author billy
 */

class Pair { 
    int x; 
    int y; 
  
    // Constructor 
public Pair(int x, int y) 
    { 
        this.x = x; 
        this.y = y; 
    } 
} 
  
// class to define user defined conparator 
class Compare { 
  
    static void compare(Pair array[]) 
    { 
        // sorts pair based on first element
        Arrays.sort(array, new Comparator<Pair>() { 
            @Override public int compare(Pair p1, Pair p2){ 
                return p1.y - p2.y; 
            } 
        }
        ); 
        
        
    } 
    static class cmp implements Comparator<Pair>{
            public int compare(Pair a,Pair b){
                return a.y-b.y;
            }
}
} 

public class HungaryGames {

    /**
     * @param args the command line arguments
     */
       	public static void main(String[] args) throws IOException {
		
            int n = readInt();
            int m = readInt();
            
            List<Pair> adj[] = new ArrayList[n+1];
            for (int i =0; i<=n; i++){
                adj[i] =new ArrayList();
            }
            
            for (int i =0; i<m; i++){
                int a  = readInt();
                int b = readInt();
                int dis = readInt();
                adj[a].add(new Pair (b,dis));//one directional
                adj[b].add(new Pair (a,dis));
            }
          
            
            int[][]dis = new int[n+1][2];
            
            for (int i =0; i<=n; i++){
                dis[i][0] = Integer.MAX_VALUE;
                dis[i][1] = Integer.MAX_VALUE;
            }
            
            dis[1][0] = 0;
            
            PriorityQueue <Pair> pq = new PriorityQueue<>(new Compare.cmp());
            pq.add(new Pair(1,0));
            
            while(!pq.isEmpty()){
                Pair pi = pq.poll();
                if (pi.y > dis[pi.x][1]){//more than second best option
                    continue;
                }
                for (Pair nxt : adj[pi.x]) {

                    if (dis[nxt.x][0] > pi.y + nxt.y) {//checks if this new path is better than the old second best
                        int temp = dis[nxt.x][0];
                        dis[nxt.x][0] = pi.y + nxt.y;
                        dis[nxt.x][1] = temp;
                        pq.add(new Pair(nxt.x, dis[nxt.x][0]));

                    }
                    
                    else if (dis[nxt.x][1] > pi.y + nxt.y && pi.y + nxt.y!=dis[nxt.x][0]){
                        dis[nxt.x][1] = pi.y + nxt.y;
                        pq.add(new Pair(nxt.x, dis[nxt.x][1]));

                    }

                    
                }
            }
            
            
            if (dis[n][1] == Integer.MAX_VALUE) System.out.println(-1);
            else System.out.println(dis[n][1]);
            
            
            
            
          
            
            
        }
        
        
        
        
        

	final private static int BUFFER_SIZE = 1 << 16;
	private static DataInputStream din = new DataInputStream(System.in);
	private static byte[] buffer = new byte[BUFFER_SIZE];
	private static int bufferPointer = 0, bytesRead = 0;
	static PrintWriter pr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

	public static String readLine() throws IOException {
		byte[] buf = new byte[64]; // line length
		int cnt = 0, c;
		while ((c = Read()) != -1) {
			if (c == '\n')
				break;
			buf[cnt++] = (byte) c;
		}
		return new String(buf, 0, cnt);
	}
        
	public static String read() throws IOException{
		byte[] ret = new byte[1024];
        int idx = 0;
        byte c = Read();
        while (c <= ' ') {
            c = Read();
        }
        do {
            ret[idx++] = c;
            c = Read();
        } while (c != -1 && c != ' ' && c != '\n' && c != '\r');
        return new String(ret, 0, idx);
	}
        
        
	public static int readInt() throws IOException {
		int ret = 0;
		byte c = Read();
		while (c <= ' ')
			c = Read();
		boolean neg = (c == '-');
		if (neg)
			c = Read();
		do {
			ret = ret * 10 + c - '0';
		} while ((c = Read()) >= '0' && c <= '9');

		if (neg)
			return -ret;
		return ret;
	}

	public static long readLong() throws IOException {
		long ret = 0;
		byte c = Read();
		while (c <= ' ')
			c = Read();
		boolean neg = (c == '-');
		if (neg)
			c = Read();
		do {
			ret = ret * 10 + c - '0';
		} while ((c = Read()) >= '0' && c <= '9');
		if (neg)
			return -ret;
		return ret;
	}

	public static double readDouble() throws IOException {
		double ret = 0, div = 1;
		byte c = Read();
		while (c <= ' ')
			c = Read();
		boolean neg = (c == '-');
		if (neg)
			c = Read();

		do {
			ret = ret * 10 + c - '0';
		} while ((c = Read()) >= '0' && c <= '9');

		if (c == '.') {
			while ((c = Read()) >= '0' && c <= '9') {
				ret += (c - '0') / (div *= 10);
			}
		}

		if (neg)
			return -ret;
		return ret;
	}

	private static void fillBuffer() throws IOException {
		bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
		if (bytesRead == -1)
			buffer[0] = -1;
	}

	private static byte Read() throws IOException {
		if (bufferPointer == bytesRead)
			fillBuffer();
		return buffer[bufferPointer++];
	}

	public void close() throws IOException {
		if (din == null)
			return;
		din.close();
	}

	static void print(Object o) {
		pr.print(o);
	}

	static void println(Object o) {
		pr.println(o);
	}

	static void flush() {
		pr.flush();
	}

	static void println() {
		pr.println();
	}

	static void exit() throws IOException {
		din.close();
		pr.close();
		System.exit(0);
	}
    
}
